(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{378:function(e,a,t){"use strict";t.r(a);var v=t(9),r=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"前端缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端缓存"}},[e._v("#")]),e._v(" 前端缓存")]),e._v(" "),t("p",[e._v("前端缓存分为两个协议")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"#%E5%BC%BA%E7%BC%93%E5%AD%98"}},[e._v("强缓存")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"#%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98"}},[e._v("协商缓存")])])])]),e._v(" "),t("h2",{attrs:{id:"强缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[e._v("#")]),e._v(" 强缓存")]),e._v(" "),t("p",[e._v("强缓存有两个字段")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Expires")])]),e._v(" "),t("li",[t("p",[e._v("cahe-control")])])]),e._v(" "),t("p",[e._v("强缓存即不会再次发起 http 请求，而直接应用缓存策略")]),e._v(" "),t("h3",{attrs:{id:"expires"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[e._v("#")]),e._v(" Expires")]),e._v(" "),t("p",[e._v("即过期时间，"),t("code",[e._v("服务端")]),e._v("发送"),t("code",[e._v("响应头")]),e._v("时，会告诉浏览器在这个过期时间之内，可以直接从"),t("code",[e._v("缓存")]),e._v("中获取"),t("code",[e._v("资源")])]),e._v(" "),t("div",{staticClass:"language-http line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Expires:")]),e._v(" Wed, 22 Nov 2019 08:41:00 GMT\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("表示资源在"),t("code",[e._v("2019年11月22号8点41分")]),e._v("过期，过期了就得向服务端发请求。")]),e._v(" "),t("p",[e._v("因为浏览器时间和服务器时间可能并不一致，所以在 http1.1 的版本中被弃用")]),e._v(" "),t("h3",{attrs:{id:"cache-control"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[e._v("#")]),e._v(" Cache-control")]),e._v(" "),t("p",[e._v("它和"),t("code",[e._v("Expires")]),e._v("本质的不同在于它并没有采用具体的过期时间点这个方式，而是采用过期时长来控制缓存，对应的字段是"),t("code",[e._v("max-age")]),e._v("。比如这个例子:")]),e._v(" "),t("div",{staticClass:"language-http line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Cache-Control:")]),e._v("max-age=3600\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("代表这个响应返回后在 3600 秒，也就是一个小时之内可以直接使用缓存。")]),e._v(" "),t("h4",{attrs:{id:"cache-control-的属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-control-的属性"}},[e._v("#")]),e._v(" Cache-control 的属性")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("no-cache: 跳过当前的缓存，向服务器发起请求询问资源是否更新，即进入`协商缓存`阶段\n\nno-store: 不进行任何形式的缓存\n")])])]),t("h2",{attrs:{id:"协商缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[e._v("#")]),e._v(" 协商缓存")]),e._v(" "),t("h3",{attrs:{id:"last-modified"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#last-modified"}},[e._v("#")]),e._v(" Last-Modified")]),e._v(" "),t("p",[e._v("即最后修改时间，该字段存在于"),t("code",[e._v("响应头")]),e._v("中")]),e._v(" "),t("p",[e._v("浏览器第一次发起请求后，服务器会返回"),t("code",[e._v("Last-Modified")]),e._v(" ： 最后修改时间")]),e._v(" "),t("p",[e._v("浏览器接收到后，如果再次请求，请求中携带"),t("code",[e._v("If-Modified-Since")]),e._v("： 最后修改时间")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("如果资源更改,服务器返回"),t("code",[e._v("200")]),e._v(",发送新的资源")])]),e._v(" "),t("li",[t("p",[e._v("如果未更改,服务器返回"),t("code",[e._v("304")])])])]),e._v(" "),t("h3",{attrs:{id:"etag"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#etag"}},[e._v("#")]),e._v(" Etag")]),e._v(" "),t("p",[e._v("资源标识符，根据文件内容，生成资源唯一标识符，只要里面内容有改动，标识符就会变更")]),e._v(" "),t("p",[e._v("浏览器接收到"),t("code",[e._v("Etag")]),e._v("值后，会像服务器发送"),t("code",[e._v("if-Node-Match")]),e._v("，会和服务器的资源进行对比")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("如果两者不一样，返回新的资源 "),t("code",[e._v("200")])])]),e._v(" "),t("li",[t("p",[e._v("否则返回"),t("code",[e._v("304")])])])]),e._v(" "),t("h2",{attrs:{id:"缓存位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[e._v("#")]),e._v(" 缓存位置")]),e._v(" "),t("p",[e._v("优先级从高到低")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("Service Worker\nMemory Cache\nDisk Cache\nPush Cache\n")])])]),t("h3",{attrs:{id:"service-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[e._v("#")]),e._v(" Service Worker")]),e._v(" "),t("p",[t("code",[e._v("Service Worker")]),e._v(" 借鉴了 Web Worker的 思路，即让 JS 运行在主线程之外，由于它脱离了浏览器的窗体，因此无法直接访问DOM。虽然如此，但它仍然能帮助我们完成很多有用的功能，比如离线缓存、消息推送和网络代理等功能。其中的离线缓存就是 "),t("code",[e._v("Service Worker Cache")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"memory-cache"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[e._v("#")]),e._v(" Memory Cache")]),e._v(" "),t("p",[e._v("Memory Cache指的是内存缓存，从效率上讲它是最快的。但是从存活时间来讲又是最短的，当渲染进程结束后，内存缓存也就不存在了。")]),e._v(" "),t("h3",{attrs:{id:"disk-cache"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#disk-cache"}},[e._v("#")]),e._v(" Disk Cache")]),e._v(" "),t("p",[e._v("就是存储在磁盘中的缓存，从存取效率上讲是比内存缓存慢的，但是他的优势在于存储容量和存储时长。稍微有些计算机基础的应该很好理解，就不展开了。")]),e._v(" "),t("p",[e._v("好，现在问题来了，既然两者各有优劣，那浏览器如何决定将资源放进内存还是硬盘呢？主要策略如下：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("文件较大的时候，进入磁盘")])]),e._v(" "),t("li",[t("p",[e._v("内存使用率较高的时候进入磁盘")])])]),e._v(" "),t("h3",{attrs:{id:"push-cache"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#push-cache"}},[e._v("#")]),e._v(" Push Cache")]),e._v(" "),t("p",[e._v("推送缓存")]),e._v(" "),t("p",[e._v("它是 "),t("code",[e._v("HTTP/2")]),e._v(" 中的内容，虽然现在应用的并不广泛，但随着 "),t("code",[e._v("HTTP/2")]),e._v(" 的推广，它的应用越来越广泛")])])}),[],!1,null,null,null);a.default=r.exports}}]);